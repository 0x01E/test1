name: Build
on:
  workflow_call:
    inputs:
      upload-artifact:
        type: boolean
        default: true
      tag-name:
        type: string
        default: "draft"
      channel:
        type: string
        default: "dev"

env:
  IS_GITHUB_ACTIONS: 1
  CHANNEL: "${{ inputs.channel }}"
  FLUTTER_VERSION: '3.24.0'
  NDK_VERSION: r26d
  UPLOAD_ARTIFACT: "${{ inputs.upload-artifact }}"
  TAG_NAME: "${{ inputs.tag-name }}"
  TARGET_NAME_apk: "Hiddify-Android"
  TARGET_NAME_exe: "Hiddify-Windows-x64"
  TARGET_NAME_dmg: "Hiddify-MacOS"

jobs:
  test:
    outputs:
      draftBuildCode: ${{ steps.draftBuildCode.outputs.datetime }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2.16.0
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: Prepare
        run: make linux-prepare
      - name: Test
        run: flutter test

      - name: make draftBuildCode
        id: draftBuildCode
        run: echo "::set-output name=datetime::$(date +'%d.%H.%M')"

  build:
    needs: test
    permissions: write-all
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: android-apk
            os: ubuntu-latest
            targets: apk

          - platform: windows
            os: windows-2019
            aarch: amd64
            targets: exe

          - platform: macos
            os: macos-13
            aarch: universal
            targets: dmg

    runs-on: ${{ matrix.os }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2.16.0
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Setup Java
        if: startsWith(matrix.platform,'android')
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 17

      - name: Setup NDK
        if: startsWith(matrix.platform,'android')
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: ${{ env.NDK_VERSION }}
          add-to-path: true
          link-to-sdk: true

      - name: Setup dependencies
        run: |
          make ${{ matrix.platform }}-install-dependencies

      - name: Prepare for ${{ matrix.platform }}
        run: |
          make ${{ matrix.platform }}-prepare
          tree

      - name: Build ${{ matrix.platform }}
        env:
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        run: |
          make ${{ matrix.platform }}-release

      - name: Copy to out Android APK
        if: matrix.platform == 'android-apk'
        run: |
          mkdir out
          ls -R ./build/app/outputs
          cp ./build/app/outputs/flutter-apk/*arm64-v8a*.apk out/${TARGET_NAME_apk}-arm64.apk || echo "no arm64 apk"
          cp ./build/app/outputs/flutter-apk/*armeabi-v7a*.apk out/${TARGET_NAME_apk}-arm7.apk || echo "no arm7 apk"
          cp ./build/app/outputs/flutter-apk/*x86_64*.apk out/${TARGET_NAME_apk}-x86_64.apk || echo "no x64 apk"
          cp ./build/app/outputs/flutter-apk/app-release.apk out/${TARGET_NAME_apk}-universal.apk || echo "no universal apk"

      - name: Copy to out Windows
        if: matrix.platform == 'windows'
        run: |
          tree
          .\scripts\package_windows.ps1

      - name: Copy to out MacOS
        if: matrix.platform == 'macos'
        run: |
          ls -R dist/
          mkdir out
          mv dist/*/*.dmg out/${TARGET_NAME_dmg}.dmg

      - name: Upload Artifact
        if: env.UPLOAD_ARTIFACT == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.platform}}
          path: ./out
          retention-days: 1
